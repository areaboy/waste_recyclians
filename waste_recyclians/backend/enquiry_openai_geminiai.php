<?php
error_reporting(0);

if (isset($_POST) and $_SERVER['REQUEST_METHOD'] == "POST") {
session_start();
$userid_sess =  htmlentities(htmlentities($_SESSION['uid_s'], ENT_QUOTES, "UTF-8"));


include('settings.php');

$id = strip_tags($_POST['id']);
$content = strip_tags($_POST['content']);
$chatbot_ai = strip_tags($_POST['chatbot_ai']);



if ($content == ''){
echo "<div style='background:red;padding:8px;color:white;border:none;' id='alerts_c'>AI cONTENT TO BE Analyzed cannot be empty</div>";
exit();
}

if ($chatbot_ai == ''){
echo "<div style='background:red;padding:8px;color:white;border:none;' id='alerts_c'>Please Select AI Model to be used..</div>";
exit();
}








$text_prompt =$content;

// Start ChatGPT Text Analysis

if($chatbot_ai=='Open_AI'){


$url ="https://api.openai.com/v1/chat/completions";
$data_param ='{
    "model": "gpt-4o",
    "messages": [
      {
        "role": "user",
        "content": "'.$text_prompt.'"
      }
    ]
  }';



$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $url);
curl_setopt($ch, CURLOPT_POST, TRUE);
curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/json', "Authorization: Bearer $chatgpt_accesstoken"));  
curl_setopt($ch, CURLOPT_POSTFIELDS, $data_param);
//curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");
curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
$output = curl_exec($ch); 

if($output == ''){
echo "<div id='alerts_openai' style='background:red;color:white;padding:10px;border:none;'>API Call to Chatgpt AI Failed. Ensure there is an Internet  Connections...</div><br>";
exit();
}

$http_status = curl_getinfo($ch, CURLINFO_HTTP_CODE);

// catch error message before closing
if (curl_errno($ch)) {
   //echo $error_msg = curl_error($ch);
}

curl_close($ch);



$json = json_decode($output, true);
$id = $json["id"];

$mx_error = $json["error"]["message"];
if($mx_error != ''){
echo "<div id='alerts_openai' style='background:red;color:white;padding:10px;border:none;'>Chatgpt API Error Message: $mx_error.</div><br>";
//exit();
}

if($http_status == 400){
echo "<div id='alerts_openai' style='background:red;color:white;padding:10px;border:none;'>OpenAI/ChatGPT request was malformed or missing some required parameters</div><br>";
exit();
}

if($http_status == 429){
echo "<div id='alerts_openai' style='background:red;color:white;padding:10px;border:none;'>You have hit your OpenAI/ChatGPT assigned rate limit.</div><br>";
exit();
}

if($http_status == 403){
echo "<div id='alerts_openai' style='background:red;color:white;padding:10px;border:none;'>You have exceeded the allowed number of tokens in your OpenAI/ChatGPT request.</div><br>";
exit();
}

if($http_status == 401){
echo "<div id='alerts_openai' style='background:red;color:white;padding:10px;border:none;'> OpenAI/ChatGPT API key or token was invalid, expired, or revoked.</div><br>";
exit();
}

if($http_status == 404){
echo "<div id='alerts_openai' style='background:red;color:white;padding:10px;border:none;'>OpenAI/ChatGPT requested resource API Model was not found</div><br>";
exit();
}

if($http_status == 500){
echo "<div id='alerts_openai' style='background:red;color:white;padding:10px;border:none;'>An issue occurred on the OpenAI/ChatGPT server side</div><br>";
exit();
}

if($http_status == 403){
echo "<div id='alerts_openai' style='background:red;color:white;padding:10px;border:none;'>OpenAI/ChatGPT API key or token lacks the required permissions</div><br>";
exit();
}

if($http_status == 200){
//echo "<div style='background:green;color:white;padding:10px;border:none;'>Chatgpt API Call Successful....</div><br>";

if($id != ''){
//"<div class='clear_res' style='background:green;color:white;padding:10px;border:none;'>Content Successfully Generated by ChatGPT/OpenAI....</div><br>";
$content_generated = $json["choices"][0]["message"]["content"];

echo "<div class='clear_res'> 
<div class='well'> 
<div class='clear_res' style='background:green;color:white;padding:10px;border:none;'>Content Successfully Generated by ChatGPT/OpenAI....</div><br>
<button class='btn btn-danger clear_btn' style='float:right'>Clear Result</button><br>
<h3>AI Model: $chatbot_ai</h3>
<h4>Question: $content</h4>
<b>Generated Response:</b><br>
$content_generated 

<br><button class='btn btn-danger clear_btn' style='float:right'>Clear Result</button><br>
</div></div>";

//$val = str_replace(',', ',<br>', $content);
//$val2 = str_replace('.', '<br>', $content);


}
}


}

// end ChatGpt Text Analysis




// Start Google Gemini Text Analysis

if($chatbot_ai=='Gemini_AI'){
$url ="https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent?key=$google_gimini_apikey";


$payload ='{
      "contents": [{
        "parts":[{
          "text":  "'.$text_prompt.'"}]}]}';

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $url);
curl_setopt($ch, CURLOPT_POST, TRUE);
curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type:application/json'));
curl_setopt($ch, CURLOPT_POSTFIELDS, $payload);
//curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "GET");
curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
$output = curl_exec($ch); 


if($output == ''){
echo "<div id='alerts_geminiai' style='background:red;color:white;padding:10px;border:none;'>API Call to Google Gemini AI Failed. Ensure there is an Internet  Connections...</div><br>";
exit();
}

$http_status = curl_getinfo($ch, CURLINFO_HTTP_CODE);

// catch error message before closing
if (curl_errno($ch)) {
   //echo $error_msg = curl_error($ch);
}

curl_close($ch);



$json = json_decode($output, true);
$id_content = $json['candidates'][0]['content']['parts'][0]['text'];

$mx_error = $json["error"]["message"];
if($mx_error != ''){
echo "<div id='alerts_geminiai' style='background:red;color:white;padding:10px;border:none;'>Google Gemini API Error Message: $mx_error.</div><br>";
//exit();
}


if($http_status == 400){
echo "<div id='alerts_geminiai' style='background:red;color:white;padding:10px;border:none;'>Inavlid Argument. Request Body is Malformed. Ensure that Google Gemini API Key is Correct.
 or Also ensures that you Enable billing on your Project in Google AI Studio.</div><br>";
exit();
}

if($http_status == 429){
echo "<div id='alerts_geminiai' style='background:red;color:white;padding:10px;border:none;'>Google Gemini Resource Exhausted. You have Exceeded your Resource Rate Limit</div><br>";
exit();
}

if($http_status == 403){
echo "<div id='alerts_geminiai' style='background:red;color:white;padding:10px;border:none;'>Permission Denied. Your Google Gemini API Key does  not have the required permission</div><br>";
exit();
}

if($http_status == 401){
echo "<div id='alerts_geminiai' style='background:red;color:white;padding:10px;border:none;'> Google Gemini API key or token was invalid, expired, or revoked.</div><br>";
exit();
}

if($http_status == 404){
echo "<div id='alerts_geminiai' style='background:red;color:white;padding:10px;border:none;'>Google Gemini requested resource API Model was not found</div><br>";
exit();
}

if($http_status == 500){
echo "<div id='alerts_geminiai' style='background:red;color:white;padding:10px;border:none;'>An issue occurred on the Google Gemini server side</div><br>";
exit();
}


if($http_status == 200){
//echo "<div style='background:green;color:white;padding:10px;border:none;'>Google Gemini API Call Successful....</div><br>";

if($id_content != ''){
//echo "<div class='clear_res' style='background:green;color:white;padding:10px;border:none;'>Content Successfully Generated by Google Gemini AI</div><br>";
$content_generated = $json['candidates'][0]['content']['parts'][0]['text'];

echo "<div class='clear_res'> 
<div class='well'> 
<div class='clear_res' style='background:green;color:white;padding:10px;border:none;'>Content Successfully Generated by Gemini AI....</div><br>
<button class='btn btn-danger clear_btn' style='float:right'>Clear Result</button><br>
<h3>AI Model: $chatbot_ai</h3>
<h4>Question: $content</h4>
<b>Generated Response:</b><br>
$content_generated 

<br><button class='btn btn-danger clear_btn' style='float:right'>Clear Result</button><br>
</div></div>";
              
// Remove special characters except comma fullstop and space
//$message = preg_replace('/[^A-Za-z0-9,. ]/', '', $docs_content);
//$val = str_replace(',', ',<br>', $content);
//$val2 = str_replace('.', '<br>', $content);

}
}


}
// end Google Gemini Text Analysis





}


?>



